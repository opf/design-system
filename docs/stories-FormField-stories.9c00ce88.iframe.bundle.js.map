{"version":3,"file":"stories-FormField-stories.9c00ce88.iframe.bundle.js","mappings":"ihCAeA,MAmBA,2BAnBkB,CAChBA,MAAO,qBACPC,U,oFAAWC,EACXC,WAAY,EACVC,EAAAA,gDAAAA,gBAAe,CACbC,QAAS,CACPC,mDAAAA,EACAC,4CAAAA,IAEFC,UAAW,CACT,CACEC,QAASC,yDAAAA,EACTC,WAAY,IAAMC,gDAAAA,QAUfC,UAAkB,CAC7BC,OAASC,OAAI,CACXC,MAAOD,KACPE,SAAU,sJAQDC,gBAAwB,CACnCJ,OAASC,OAAI,CACXC,MAAOD,KACPE,SAAU,8RAWDE,gBAAwB,CACnCL,OAASC,OAAI,CACXC,MAAO,OAAF,wBACAD,MAAI,CACPK,OAAQ,IAAIC,4CAAAA,GAAiB,CAC3BC,QAAS,IAAIC,4CAAAA,GAAmB,KAAM,CAACC,4CAAAA,GAAAA,SAAqBA,4CAAAA,GAAAA,UAAqB,OAEnFC,SAAWC,OAAcC,QAAQC,IAAI,WAAYF,SAEnDT,SAAU,0pCA8CDY,WAAmB,CAC9Bf,OAASC,OAAI,CACXC,MAAO,OAAF,wBACAD,MAAI,CACPe,MAAQC,GAAaJ,QAAQC,IAAIG,KAEnCd,SAAU,6e,8KC3HP,MAAML,gBAAkB,CAC7BoB,EAAYC,OACH,CACL,sBAAuB,CACrB,MACA,MACA,MACA,MACA,MACA,MACA,OAEF,iBAAkB,CAChB,SACA,UACA,YACA,WACA,SACA,WACA,UAEF,wBAAyB,CACvB,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAEF,mBAAoB,CAClB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,aAEFA,OAASA,M","sources":["./src/stories/FormField.stories.ts","./src/stories/i18n.service.stub.ts"],"sourcesContent":["import type { Meta, StoryObj } from '@storybook/angular';\nimport { moduleMetadata } from '@storybook/angular';\nimport {\n  UntypedFormControl,\n  UntypedFormGroup,\n  Validators,\n} from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { I18nService } from '../app/core/i18n/i18n.service';\nimport { I18nServiceStub } from './i18n.service.stub';\n\nimport { OpSpotModule } from '../app/spot/spot.module';\nimport { SpotFormFieldComponent } from '../app/spot/components/form-field/form-field.component';\n\nconst meta:Meta = {\n  title: 'Patterns/FormField',\n  component: SpotFormFieldComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [\n        OpSpotModule,\n        ReactiveFormsModule,\n      ],\n      providers: [\n        {\n          provide: I18nService,\n          useFactory: () => I18nServiceStub,\n        },\n      ],\n    }),\n  ],\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const InputSlot:Story = {\n  render: (args) => ({\n    props: args,\n    template: `\n      <spot-form-field label=\"Form field with input\">\n        <spot-text-field slot=\"input\"></spot-text-field>\n      </spot-form-field>\n   `,\n  }),\n};\n\nexport const DescriptionSlot:Story = {\n  render: (args) => ({\n    props: args,\n    template: `\n      <spot-form-field label=\"Form field with description\">\n        <spot-text-field slot=\"input\"></spot-text-field>\n        <span slot=\"description\">\n          Helpful guidelines so the user can be confident about their input.\n        </span>\n      </spot-form-field>\n   `,\n  }),\n};\n\nexport const BasicValidation:Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      myForm: new UntypedFormGroup({\n        myInput: new UntypedFormControl(null, [Validators.required, Validators.minLength(8)]),\n      }),\n      onSubmit: (event:any) => console.log('onSubmit', event),\n    },\n    template: `\n      <form\n        [formGroup]=\"myForm\"\n        (ngSubmit)=\"onSubmit($event)\"\n        class=\"spot-container\"\n      >\n        <spot-form-field\n          [label]=\"label\"\n          [required]=\"required\"\n          [noWrapLabel]=\"noWrapLabel\"\n        >\n          <spot-text-field\n            formControlName=\"myInput\"\n            slot=\"input\"\n          ></spot-text-field>\n\n          <div\n            slot=\"errors\"\n            class=\"spot-form-field--error\"\n            *ngIf=\"myForm.get('myInput')!.errors?.required\"\n          >\n            This input is required.\n          </div>\n\n          <div\n            slot=\"errors\"\n            class=\"spot-form-field--error\"\n            *ngIf=\"myForm.get('myInput')!.errors?.minlength\"\n          >\n            This input needs to be at least 8 characters long.\n          </div>\n        </spot-form-field>\n\n        <div class=\"spot-action-bar\">\n          <div class=\"spot-action-bar--right\">\n            <button\n              type=\"submit\"\n              class=\"button -highlight spot-action-bar--action\"\n            >Submit data</button>\n          </div>\n        </div>\n      </form>\n   `,\n  }),\n};\n\nexport const ActionSlot:Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      alert: (s:string) => console.log(s),\n    },\n    template: `\n      <spot-form-field label=\"Form field with input\">\n        <spot-text-field slot=\"input\"></spot-text-field>\n        <button\n          type=\"button\"\n          (click)=\"log('Some action')\"\n          class=\"spot-link\"\n          slot=\"action\"\n        >Some action</button>\n        <button\n          type=\"button\"\n          (click)=\"log('Another action')\"\n          class=\"spot-link\"\n          slot=\"action\"\n        >Another action</button>\n      </spot-form-field>\n   `,\n  }),\n};\n","export const I18nServiceStub = {\n  t<T=string>(name:string):any {\n    return {\n      'date.abbr_day_names': [\n        'Mon',\n        'Tue',\n        'Wed',\n        'Thu',\n        'Fri',\n        'Sat',\n        'Sun',\n      ],\n      'date.day_names': [\n        'Monday',\n        'Tuesday',\n        'Wednesday',\n        'Thursday',\n        'Friday',\n        'Saturday',\n        'Sunday',\n      ],\n      'date.abbr_month_names': [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n      ],\n      'date.month_names': [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n      ],\n    }[name] || name as T;\n  },\n};\n"],"names":["title","component","SpotFormFieldComponent","decorators","moduleMetadata","imports","OpSpotModule","ReactiveFormsModule","providers","provide","I18nService","useFactory","I18nServiceStub","InputSlot","render","args","props","template","DescriptionSlot","BasicValidation","myForm","UntypedFormGroup","myInput","UntypedFormControl","Validators","onSubmit","event","console","log","ActionSlot","alert","s","t","name"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}