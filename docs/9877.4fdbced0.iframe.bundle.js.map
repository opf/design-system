{"version":3,"file":"9877.4fdbced0.iframe.bundle.js","mappings":"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","sources":["./node_modules/@floating-ui/core/dist/floating-ui.core.mjs","./node_modules/@floating-ui/utils/dom/dist/floating-ui.utils.dom.mjs","./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs","./node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs"],"sourcesContent":["import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? min$1 - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset + alignmentOffset\n      }\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isYAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n","function getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  // Browsers without `ShadowRoot` support.\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);\n}\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].includes(getNodeName(element));\n}\nfunction isContainingBlock(element) {\n  const webkit = isWebKit();\n  const css = getComputedStyle(element);\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else {\n      currentNode = getParentNode(currentNode);\n    }\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nfunction isLastTraversableNode(node) {\n  return ['html', 'body', '#document'].includes(getNodeName(node));\n}\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.pageXOffset,\n    scrollTop: element.pageYOffset\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));\n}\n\nexport { getComputedStyle, getContainingBlock, getDocumentElement, getNearestOverflowAncestor, getNodeName, getNodeScroll, getOverflowAncestors, getParentNode, getWindow, isContainingBlock, isElement, isHTMLElement, isLastTraversableNode, isNode, isOverflowElement, isShadowRoot, isTableElement, isWebKit };\n","import { rectToClientRect, computePosition as computePosition$1 } from '@floating-ui/core';\nexport { arrow, autoPlacement, detectOverflow, flip, hide, inline, limitShift, offset, shift, size } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle, isHTMLElement, isElement, getWindow, isWebKit, getDocumentElement, getNodeName, isOverflowElement, getNodeScroll, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentIFrame = win.frameElement;\n    while (currentIFrame && offsetParent && offsetWin !== win) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentIFrame = getWindow(currentIFrame).frameElement;\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  if (offsetParent === documentElement) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      ...clippingAncestor,\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  return getCssDimensions(element);\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  return element.offsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const window = getWindow(element);\n  if (!isHTMLElement(element)) {\n    return window;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {\n    return window;\n  }\n  return offsetParent || getContainingBlock(element) || window;\n}\n\nconst getElementRects = async function (_ref) {\n  let {\n    reference,\n    floating,\n    strategy\n  } = _ref;\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  return {\n    reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      ...(await getDimensionsFn(floating))\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    clearTimeout(timeoutId);\n    io && io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = element.getBoundingClientRect();\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 100);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          resizeObserver && resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo && cleanupIo();\n    resizeObserver && resizeObserver.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain CSS positioning\n * strategy.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { autoUpdate, computePosition, platform };\n","const sides = ['top', 'right', 'bottom', 'left'];\nconst alignments = ['start', 'end'];\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = v => ({\n  x: v,\n  y: v\n});\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction getSideAxis(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\nexport { alignments, clamp, createCoords, evaluate, expandPaddingObject, floor, getAlignment, getAlignmentAxis, getAlignmentSides, getAxisLength, getExpandedPlacements, getOppositeAlignmentPlacement, getOppositeAxis, getOppositeAxisPlacements, getOppositePlacement, getPaddingObject, getSide, getSideAxis, max, min, placements, rectToClientRect, round, sides };\n"],"names":["computeCoordsFromPlacement","_ref","placement","rtl","sideAxis","getSideAxis","alignmentAxis","getAlignmentAxis","alignLength","getAxisLength","side","getSide","isVertical","commonX","reference","x","width","floating","commonY","y","height","commonAlign","coords","getAlignment","computePosition","_ref2","_asyncToGenerator","config","validMiddleware","middleware","filter","Boolean","platform","isRTL","rects","getElementRects","strategy","statefulPlacement","middlewareData","resetCount","i","length","nextX","nextY","fn","initialPlacement","elements","name","data","reset","_x","_x2","_x3","apply","arguments","detectOverflow","_x4","_x5","_detectOverflow","state","options","_await$platform$isEle","evaluate","paddingObject","getPaddingObject","padding","element","altBoundary","elementContext","clippingClientRect","rectToClientRect","getClippingRect","isElement","contextElement","getDocumentElement","boundary","rootBoundary","rect","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","top","bottom","left","right","arrow","axis","arrowDimensions","getDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","largestPossiblePadding","minPadding","min","maxPadding","min$1","max","center","offset","clamp","alignmentOffset","centerOffset","flip","_middlewareData$flip","mainAxis","checkMainAxis","crossAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","detectOverflowOptions","isBasePlacement","flipAlignment","getOppositePlacement","getExpandedPlacements","fallbackAxisSideDirection","push","getOppositeAxisPlacements","placements","overflow","overflows","overflowsData","sides","getAlignmentSides","every","_middlewareData$flip2","_overflowsData$filter","nextIndex","index","nextPlacement","resetPlacement","d","sort","a","b","fallbackStrategy","_overflowsData$map$so","map","reduce","acc","getSideOffsets","isAnySideFullyClipped","some","hide","offsets","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","_convertValueToCoords","alignment","mainAxisMulti","includes","crossAxisMulti","rawValue","diffCoords","convertValueToCoords","_x6","_x7","shift","getOppositeAxis","mainAxisCoord","crossAxisCoord","maxSide","limitedCoords","limiter","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse","_middlewareData$offse2","isOriginSide","size","heightSide","widthSide","overflowAvailableHeight","overflowAvailableWidth","noShift","availableHeight","availableWidth","maximumClippingWidth","maximumClippingHeight","xMin","xMax","yMin","yMax","nextDimensions","getNodeName","node","isNode","nodeName","toLowerCase","getWindow","_node$ownerDocument","ownerDocument","defaultView","window","document","documentElement","value","Node","Element","isHTMLElement","HTMLElement","isShadowRoot","ShadowRoot","isOverflowElement","getComputedStyle","test","overflowY","overflowX","display","isTableElement","isContainingBlock","webkit","isWebKit","css","transform","perspective","containerType","backdropFilter","willChange","contain","CSS","supports","isLastTraversableNode","getNodeScroll","scrollLeft","scrollTop","pageXOffset","pageYOffset","getParentNode","result","assignedSlot","parentNode","host","getNearestOverflowAncestor","body","getOverflowAncestors","list","_node$ownerDocument2","scrollableAncestor","isBody","win","concat","visualViewport","getCssDimensions","parseFloat","hasOffset","offsetWidth","offsetHeight","shouldFallback","round","$","unwrapElement","domElement","createCoords","getBoundingClientRect","Number","isFinite","noOffsets","getVisualOffsets","offsetLeft","offsetTop","includeScale","isFixedStrategy","clientRect","scale","visualOffsets","shouldAddVisualOffsets","isFixed","floatingOffsetParent","offsetWin","currentIFrame","frameElement","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","getWindowScrollBarX","getClientRectFromClippingAncestor","clippingAncestor","getViewportRect","html","clientWidth","clientHeight","visualViewportBased","getDocumentRect","scroll","scrollWidth","scrollHeight","direction","getInnerBoundingClientRect","hasFixedPositionAncestor","stopNode","position","getRectRelativeToOffsetParent","isOffsetParentAnElement","offsetRect","getTrueOffsetParent","polyfill","getContainingBlock","currentNode","clippingAncestors","getClippingElementAncestors","cache","cachedResult","get","el","currentContainingBlockComputedStyle","elementIsFixed","computedStyle","currentNodeIsContaining","ancestor","set","this","_c","firstClippingAncestor","clippingRect","accRect","getOffsetParentFn","getDimensionsFn","getClientRects","Array","from","autoUpdate","update","ResizeObserver","IntersectionObserver","referenceEl","ancestors","ancestorScroll","ancestorResize","forEach","addEventListener","passive","cleanupIo","layoutShift","observeMove","onMove","timeoutId","io","root","cleanup","clearTimeout","disconnect","refresh","skip","threshold","rootMargin","floor","isFirstUpdate","handleObserve","entries","ratio","intersectionRatio","setTimeout","e","observe","frameId","reobserveFrame","resizeObserver","elementResize","firstEntry","target","unobserve","cancelAnimationFrame","requestAnimationFrame","animationFrame","prevRefRect","frameLoop","nextRefRect","removeEventListener","Map","mergedOptions","platformWithCache","computePosition$1","Math","v","oppositeSideMap","oppositeAlignmentMap","start","end","param","split","mainAlignmentSide","oppositePlacement","getOppositeAlignmentPlacement","replace","getSideList","isStart","lr","rl","tb","bt","expandPaddingObject"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2,3]}