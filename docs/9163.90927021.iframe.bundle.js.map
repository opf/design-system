{"version":3,"file":"9163.90927021.iframe.bundle.js","mappings":"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","sources":["./src/app/core/i18n/i18n.service.ts","./src/app/shared/components/dataset-inputs.ts","./src/app/spot/components/breadcrumbs/breadcrumbs.component.ts","./src/app/spot/components/checkbox/checkbox.component.ts","./src/app/spot/components/drop-modal/drop-modal-teleportation.service.ts","./src/app/shared/helpers/keyCodes.enum.ts","./src/app/shared/helpers/focus-helpers.ts","./src/app/spot/components/drop-modal/drop-modal.component.ts","./src/app/spot/components/form-field/form-field.component.ts","./src/app/spot/components/selector-field/selector-field.component.ts","./src/app/spot/components/switch/switch.component.ts","./src/app/spot/components/text-field/text-field.component.ts","./src/app/spot/components/toggle/toggle.component.ts","./src/app/spot/components/tooltip/tooltip.component.ts","./src/app/spot/drop-alignment-options.ts","./src/app/spot/components/filter-chip/filter-chip.component.ts","./src/app/spot/components/form-field/form-binding.directive.ts","./src/app/shared/helpers/angular/until-destroyed.mixin.ts","./src/app/spot/components/drop-modal/drop-modal-portal.component.ts","./src/app/spot/spot.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { I18n } from 'i18n-js';\nimport { FormatNumberOptions, TranslateOptions } from 'i18n-js/src/typing';\n\n@Injectable({ providedIn: 'root' })\nexport class I18nService {\n  private i18n:I18n = window.I18n;\n\n  public get locale():string {\n    return this.i18n.locale;\n  }\n\n  public t<T = string>(input:string, options:Partial<TranslateOptions> = {}) {\n    return this.i18n.t<T>(input, options);\n  }\n\n  public toTime = this.i18n.toTime.bind(this.i18n);\n\n  public toNumber(val:string|number, options:Partial<FormatNumberOptions>):string {\n    return this.i18n.localize('number', val, options);\n  }\n}\n","import 'reflect-metadata';\nimport {\n  Component,\n  ElementRef,\n  ɵDirectiveDef,\n} from '@angular/core';\n\n/** We expect an ElementRef to be present on the target class */\nexport interface DatasetInputsDecorated extends Component {\n  elementRef:ElementRef<HTMLElement>;\n}\n\nexport interface DatasetInputsComponent extends DatasetInputsDecorated {\n  elementRef:ElementRef<HTMLElement>;\n  [key:string]:unknown;\n}\n\n/**\n * The populateInputsFromDataset function automatically sets input values from `data` attributes set on a component tag.\n * This is useful if you're rendering the tag in the backend but want to provide data to the component via its inputs.\n *\n * Usage:\n *\n * ```\n * @Component({ selector: 'my-component' })\n * export class MyComponent {\n *   @Input() someInput:string[] = [];\n *\n *   constructor(\n *    elementRef:ElementRef,\n *   ) {\n *     populateInputsFromDataset(this);\n *   }\n * }\n * ```\n *\n * Now you can send data from the backend to the component by JSON:\n *\n * <%= content_tag 'my-component',\n *                 '',\n *                 data: {\n *                   'some-input': ['a', 'b'].to_json\n *                 }\n * %>\n * Warning: this is only checked during the constructor phase once. Changes to the dataset\n * will not be reflected in the inputs. If you need inputs that update, use normal Angular bindings.\n */\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nexport function populateInputsFromDataset(instance:DatasetInputsDecorated):any {\n  // TypeScript won't allow us to do the necessary metaprogramming here since it does not\n  // know about these keys (probably because we should not touch them)\n  const cstr = instance.constructor as unknown as DatasetInputsComponent;\n\n  // Here we find the declared input names of the component.\n  // With them way we can make sure we don't overwrite any non-input values.\n  // This seems to always be ɵcmp, but we don't want to depend on that knowledge.\n  // FIXME: Is there a better way to get to this information? It does not seem to be part of Reflect metadata\n  const declaredInputsParentKey = Object.keys(cstr)\n    .find((key:string) => typeof (cstr[key] as ɵDirectiveDef<unknown>).declaredInputs === 'object');\n\n  if (!declaredInputsParentKey) {\n    console.warn('Could not find declared inputs for component');\n    return;\n  }\n\n  const input = cstr[declaredInputsParentKey] as ɵDirectiveDef<unknown>;\n  const inputs = input.declaredInputs as { [key:string]:string };\n\n  Object.keys(inputs)\n    .forEach((outsideName) => {\n      const insideName = inputs[outsideName];\n\n      const { dataset } = (instance as unknown as DatasetInputsComponent).elementRef.nativeElement;\n\n      if (!dataset[outsideName]) {\n        return;\n      }\n\n      try {\n        (instance as unknown as DatasetInputsComponent)[insideName] = JSON.parse(dataset[outsideName] || '');\n      } catch (err) {\n        console.error(\"Couldn't parse input: \", outsideName, instance.elementRef.nativeElement.dataset);\n        console.error(`\nMake sure to make all data attributes you want to use as input JSON parseable.\nThis means that plain strings have to be wrapped in double quotes, and the attribute value is easiest to set with single quotes.\nAn example:\n\n<op-example example-input='\"myString\"'></op-example>\n`);\n\n        // Rethrow since an error at this point is basically a syntax error and should be fixed\n        throw err;\n      }\n    });\n}\n","// -- copyright\n// OpenProject is an open source project management software.\n// Copyright (C) 2012-2023 the OpenProject GmbH\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License version 3.\n//\n// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:\n// Copyright (C) 2006-2013 Jean-Philippe Lang\n// Copyright (C) 2010-2013 the ChiliProject Team\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License\n// as published by the Free Software Foundation; either version 2\n// of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n//\n// See COPYRIGHT and LICENSE files for more details.\n//++\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\nimport { BreadcrumbsContent } from 'core-app/spot/components/breadcrumbs/breadcrumbs-content';\n\n@Component({\n  selector: 'spot-breadcrumbs',\n  templateUrl: './breadcrumbs.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SpotBreadcrumbsComponent {\n  @HostBinding('class.spot-breadcrumbs') className = true;\n\n  @Input() content:BreadcrumbsContent;\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  HostBinding,\n  Input,\n  Output,\n  ViewChild,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\n\nexport type SpotCheckboxState = true|false|null;\n\n@Component({\n  selector: 'spot-checkbox',\n  templateUrl: './checkbox.component.html',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SpotCheckboxComponent),\n    multi: true,\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SpotCheckboxComponent implements ControlValueAccessor {\n  @HostBinding('class.spot-checkbox') public className = true;\n\n  @ViewChild('input') public input:ElementRef;\n\n  /**\n   * The tabindex for the underlying HTML input\n   */\n  @Input() tabindex = 0;\n\n  /**\n   * Whether the input should be disabled\n   */\n  @Input() disabled = false;\n\n  /**\n   * The name of the input. Will be autogenerated if not given,\n   * but especially useful to provide in a hybrid Rails <-> Angular context\n   * where a submit of a form is handled without JS.\n   */\n  @Input() name = `spot-checkbox-${+(new Date())}`;\n\n  /**\n   * If you're not using Angular Reactive Forms (Which you should be using!)\n   * then you can manually set the checked state via this input.\n   */\n  @Input() public checked = false;\n\n  /**\n   * Emits when the checked state changes.\n   */\n  @Output() checkedChange = new EventEmitter<boolean>();\n\n  constructor(\n    readonly cdRef:ChangeDetectorRef,\n  ) {}\n\n  onStateChange():void {\n    const value = (this.input.nativeElement as HTMLInputElement).checked;\n    this.checkedChange.emit(value);\n    this.onChange(value);\n    this.onTouched(value);\n  }\n\n  writeValue(value:SpotCheckboxState):void {\n    // This is set in a timeout because the initial value is set before the template is ready,\n    // which causes the input nativeElement to not be available yet.\n    setTimeout(() => {\n      const input = this.input.nativeElement as HTMLInputElement;\n      input.indeterminate = value === null;\n\n      this.checked = !!value;\n      this.cdRef.detectChanges();\n    });\n  }\n\n  onChange = (_:SpotCheckboxState):void => {};\n\n  onTouched = (_:SpotCheckboxState):void => {};\n\n  registerOnChange(fn:(_:SpotCheckboxState) => void):void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn:(_:SpotCheckboxState) => void):void {\n    this.onTouched = fn;\n  }\n}\n","import {\n  Injectable,\n  TemplateRef,\n} from '@angular/core';\nimport {\n  BehaviorSubject,\n  Subject,\n} from 'rxjs';\nimport { distinctUntilChanged, filter, take } from 'rxjs/operators';\n\nexport type TeleportInstance = TemplateRef<any>;\n\n@Injectable({ providedIn: 'root' })\nexport class SpotDropModalTeleportationService {\n\n  public templateRef$ = new BehaviorSubject<TeleportInstance|null>(null);\n\n  public hasRendered$ = new Subject<boolean>();\n\n  public hasRenderedFiltered$ = this.hasRendered$.pipe(distinctUntilChanged());\n\n  public afterRenderOnce$(appearOrDissapear:boolean = true) {\n    return this.hasRenderedFiltered$\n      .pipe(\n        filter(f => f === appearOrDissapear),\n        take(1),\n      );\n  }\n\n  public activate(instance: TeleportInstance) {\n    this.templateRef$.next(instance);\n  }\n\n  public clear() { \n    this.templateRef$.next(null);\n  }\n}\n","export enum KeyCodes {\n  BACKSPACE = 8,\n  TAB = 9,\n  ENTER = 13,\n  SHIFT = 16,\n  CTRL = 17,\n  ALT = 18,\n  PAUSE = 19,\n  CAPS_LOCK = 20,\n  ESCAPE = 27,\n  SPACE = 32,\n  PAGE_UP = 33,\n  PAGE_DOWN = 34,\n  END = 35,\n  HOME = 36,\n  LEFT_ARROW = 37,\n  UP_ARROW = 38,\n  RIGHT_ARROW = 39,\n  DOWN_ARROW = 40,\n  INSERT = 45,\n  DELETE = 46,\n  KEY_0 = 48,\n  KEY_1 = 49,\n  KEY_2 = 50,\n  KEY_3 = 51,\n  KEY_4 = 52,\n  KEY_5 = 53,\n  KEY_6 = 54,\n  KEY_7 = 55,\n  KEY_8 = 56,\n  KEY_9 = 57,\n  KEY_A = 65,\n  KEY_B = 66,\n  KEY_C = 67,\n  KEY_D = 68,\n  KEY_E = 69,\n  KEY_F = 70,\n  KEY_G = 71,\n  KEY_H = 72,\n  KEY_I = 73,\n  KEY_J = 74,\n  KEY_K = 75,\n  KEY_L = 76,\n  KEY_M = 77,\n  KEY_N = 78,\n  KEY_O = 79,\n  KEY_P = 80,\n  KEY_Q = 81,\n  KEY_R = 82,\n  KEY_S = 83,\n  KEY_T = 84,\n  KEY_U = 85,\n  KEY_V = 86,\n  KEY_W = 87,\n  KEY_X = 88,\n  KEY_Y = 89,\n  KEY_Z = 90,\n  LEFT_META = 91,\n  RIGHT_META = 92,\n  SELECT = 93,\n  NUMPAD_0 = 96,\n  NUMPAD_1 = 97,\n  NUMPAD_2 = 98,\n  NUMPAD_3 = 99,\n  NUMPAD_4 = 100,\n  NUMPAD_5 = 101,\n  NUMPAD_6 = 102,\n  NUMPAD_7 = 103,\n  NUMPAD_8 = 104,\n  NUMPAD_9 = 105,\n  MULTIPLY = 106,\n  ADD = 107,\n  SUBTRACT = 109,\n  DECIMAL = 110,\n  DIVIDE = 111,\n  F1 = 112,\n  F2 = 113,\n  F3 = 114,\n  F4 = 115,\n  F5 = 116,\n  F6 = 117,\n  F7 = 118,\n  F8 = 119,\n  F9 = 120,\n  F10 = 121,\n  F11 = 122,\n  F12 = 123,\n  NUM_LOCK = 144,\n  SCROLL_LOCK = 145,\n  SEMICOLON = 186,\n  EQUALS = 187,\n  COMMA = 188,\n  DASH = 189,\n  PERIOD = 190,\n  FORWARD_SLASH = 191,\n  GRAVE_ACCENT = 192,\n  OPEN_BRACKET = 219,\n  BACK_SLASH = 220,\n  CLOSE_BRACKET = 221,\n  SINGLE_QUOTE = 222,\n}\n","/**\n * Elements that can receive focus\n */\nexport const FOCUSABLE_ELEMENT_SELECTORS = [\n  'a[href]:not([tabindex^=\"-\"])',\n  'area[href]:not([tabindex^=\"-\"])',\n  'input:not([type=\"hidden\"]):not([type=\"radio\"]):not([disabled]):not([tabindex^=\"-\"])',\n  'input[type=\"radio\"]:not([disabled]):not([tabindex^=\"-\"])',\n  'select:not([disabled]):not([tabindex^=\"-\"])',\n  'textarea:not([disabled]):not([tabindex^=\"-\"])',\n  'button:not([disabled]):not([tabindex^=\"-\"])',\n  'iframe:not([tabindex^=\"-\"])',\n  'audio[controls]:not([tabindex^=\"-\"])',\n  'video[controls]:not([tabindex^=\"-\"])',\n  '[contenteditable]:not([tabindex^=\"-\"])',\n  '[tabindex]:not([tabindex^=\"-\"]):not(.cdk-focus-trap-anchor)',\n];\n\n/**\n * Find all focusable element within a given container\n */\nexport function findAllFocusableElementsWithin(container:HTMLElement):NodeListOf<HTMLElement> {\n  return container.querySelectorAll(FOCUSABLE_ELEMENT_SELECTORS.toString());\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { KeyCodes } from 'core-app/shared/helpers/keyCodes.enum';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport { findAllFocusableElementsWithin } from 'core-app/shared/helpers/focus-helpers';\nimport { SpotDropModalTeleportationService } from './drop-modal-teleportation.service';\nimport { filter, take } from 'rxjs/operators';\nimport { debounce } from 'lodash';\nimport {\n  autoUpdate,\n  computePosition,\n  flip,\n  limitShift,\n  Placement,\n  shift,\n} from '@floating-ui/dom';\n\n@Component({\n  selector: 'spot-drop-modal',\n  templateUrl: './drop-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SpotDropModalComponent implements OnDestroy {\n  @HostBinding('class.spot-drop-modal') public className = true;\n\n  /**\n   * Whether to allow automatic changing the alignment based on the available space.\n   */\n  @Input() public allowRepositioning = true;\n\n  /**\n   * The default alignment of the drop modal. There are twelve alignments in total. You can check which ones they are\n   * from the `SpotDropAlignmentOption` Enum that is available in 'core-app/spot/drop-alignment-options'.\n   */\n  @Input() public alignment:Placement = 'bottom-start';\n\n  public _opened = false;\n\n  /**\n   * Boolean indicating whether the modal should be opened\n   */\n  /* eslint-disable-next-line @angular-eslint/no-input-rename */\n  @Input('opened')\n  @HostBinding('class.spot-drop-modal_opened')\n  set opened(value:boolean) {\n    if (this._opened === value) {\n      return;\n    }\n\n    if (value) {\n      this.open();\n    } else {\n      this.close();\n    }\n  }\n\n  get opened():boolean {\n    return this._opened;\n  }\n\n  /**\n   * Emits when the drop modal closes. This is needed because you are usually controlling the opened\n   * state of the modal manually because you have to define the trigger that opens the modal, but can\n   * will close itself automatically if the user interacts outside of it or presses Escape.\n   *\n   * ```\n   * <spot-drop-modal\n   *   [open]=\"isDropModalOpen\"\n   *   (closed)=\"isDropModalOpen = false\"\n   * >\n   *   <button\n   *     slot=\"trigger\"\n   *     type=\"button\"\n   *     (click)=\"isDropModalOpen = true\"\n   *   >Open drop modal</button>\n   * </spot-drop-modal>\n   * ```\n   */\n  @Output() closed = new EventEmitter<void>();\n\n  public id = `drop-modal-${Math.round(Math.random() * 10000)}`;\n\n  public text = {\n    close: this.i18n.t('js.spot.drop_modal.close'),\n    focus_grab: this.i18n.t('js.spot.drop_modal.focus_grab'),\n  };\n\n  private cleanupFloatingUI:() => void|undefined;\n\n  @ViewChild('anchor') anchor:ElementRef;\n\n  @ViewChild('body') body:TemplateRef<any>;\n\n  @ViewChild('focusGrabber') focusGrabber:ElementRef;\n\n  constructor(\n    readonly i18n:I18nService,\n    readonly elementRef:ElementRef,\n    readonly cdRef:ChangeDetectorRef,\n    private teleportationService:SpotDropModalTeleportationService,\n  ) {}\n\n  open() {\n    this._opened = true;\n    this.updateAppHeight();\n    this.cdRef.detectChanges();\n\n    /*\n     * If we don't activate the body after one tick, angular will complain because\n     * it already rendered a `null` template, but then gets an update to that\n     * template in the same tick.\n     * To make it happy, we update afterwards\n     */\n    this.teleportationService.activate(this.body);\n\n    this.teleportationService\n      .hasRenderedFiltered$\n      .pipe(\n        filter((hasRendered) => !!hasRendered),\n        take(1),\n      )\n      .subscribe(() => {\n        const referenceEl = this.elementRef.nativeElement as HTMLElement;\n        const floatingEl = this.anchor.nativeElement as HTMLElement;\n        this.cleanupFloatingUI = autoUpdate(\n          referenceEl,\n          floatingEl,\n          /* eslint-disable-next-line @typescript-eslint/no-misused-promises */\n          async () => {\n            const { x, y } = await computePosition(\n              referenceEl,\n              floatingEl,\n              {\n                placement: this.alignment,\n                middleware: this.allowRepositioning ? [\n                  flip({\n                    mainAxis: true,\n                    crossAxis: true,\n                    fallbackAxisSideDirection: 'start',\n                  }),\n                  shift({ limiter: limitShift() }),\n                ] : [],\n              },\n            );\n\n            Object.assign(floatingEl.style, {\n              left: `${x}px`,\n              top: `${y}px`,\n            });\n          },\n        );\n        /*\n         * We have to set these listeners next tick, because they're so far up the tree.\n         * If the open value was set because of a click listener in the trigger slot,\n         * that event would reach the event listener added here and close the modal right away.\n         */\n        setTimeout(() => {\n          document.body.addEventListener('click', this.onGlobalClick);\n          document.body.addEventListener('keydown', this.onEscape);\n          window.addEventListener('resize', this.onResize);\n          window.addEventListener('orientationchange', this.onResize);\n\n          const focusCatcherContainer = document.querySelectorAll(\"[data-modal-focus-catcher-container='true']\")[0];\n          if (focusCatcherContainer) {\n            (findAllFocusableElementsWithin(focusCatcherContainer as HTMLElement)[0])?.focus();\n          } else {\n            // Index 1 because the element at index 0 is the trigger button to open the modal\n            (findAllFocusableElementsWithin(document.querySelector('.spot-drop-modal-portal')!)[1])?.focus();\n          }\n        });\n      });\n  }\n\n  close():void {\n    this._opened = false;\n    this.closed.emit();\n\n    /*\n     * The same as with opening; if we don't deactivate the body after\n     * one tick, angular will complain because it already rendered the\n     * template, but then gets an update to render `null` in the same tick.\n     *\n     * To make it happy, we update afterwards\n     */\n    document.body.removeEventListener('click', this.onGlobalClick);\n    document.body.removeEventListener('keydown', this.onEscape);\n    window.removeEventListener('resize', this.onResize);\n    window.removeEventListener('orientationchange', this.onResize);\n\n    this.teleportationService.clear();\n    this.cdRef.detectChanges();\n    (this.focusGrabber.nativeElement as HTMLElement).focus();\n  }\n\n  private onGlobalClick = this.close.bind(this) as () => void;\n\n  ngOnDestroy():void {\n    this.teleportationService.clear();\n    document.body.removeEventListener('click', this.onGlobalClick);\n    document.body.removeEventListener('keydown', this.onEscape);\n    window.removeEventListener('resize', this.onResize);\n    window.removeEventListener('orientationchange', this.onResize);\n    this.cleanupFloatingUI?.();\n  }\n\n  onBodyClick(e:MouseEvent):void {\n    // We stop propagation here so that clicks inside the body do not\n    // close the modal when the event reaches the document body\n    e.stopPropagation();\n  }\n\n  private escapeCallback = (evt:KeyboardEvent) => {\n    if (evt.keyCode === KeyCodes.ESCAPE) {\n      this.close();\n    }\n  };\n\n  private onEscape = debounce(this.escapeCallback.bind(this), 10);\n\n  private resizeCallback():void {\n    this.updateAppHeight();\n  }\n\n  private onResize = debounce(this.resizeCallback.bind(this), 10);\n\n  private updateAppHeight = () => {\n    const doc = document.documentElement;\n    doc.style.setProperty('--app-height', `${window.innerHeight}px`);\n  };\n}\n","import {\n  Component, ContentChild, HostBinding, Input, Optional,\n} from '@angular/core';\nimport { AbstractControl, FormGroupDirective, NgControl } from '@angular/forms';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\n\n/* eslint-disable-next-line change-detection-strategy/on-push */\n@Component({\n  selector: 'spot-form-field',\n  templateUrl: './form-field.component.html',\n})\nexport class SpotFormFieldComponent {\n  @HostBinding('class.spot-form-field') className = true;\n\n  @HostBinding('class.spot-form-field_invalid') get errorClassName():boolean {\n    return this.showErrorMessage;\n  }\n\n  /**\n   * The text label of the input\n   */\n  @Input() label = '';\n\n  /**\n   * By default, the label wraps the input. For some input types this\n   * leads to unwanted behavior because clicking in the input might focus\n   * unrelated elements.\n   *\n   * One example of an input like is the CKEditor rich text editor.\n   *\n   * Setting noWrapLabel to `true` causes the label not to wrap the input.\n   * This might slightly reduce the label functionality (e.g. clicking the label\n   * does not focus the input) but is still preferred over more broken behavior.\n   */\n  @Input() noWrapLabel = false;\n\n  /**\n   * Whether this input is required\n   */\n  @Input() required = false;\n\n  /**\n   * When to show validation errors. To remain consistent, you will almost never need to change this.\n   * However, for some inputs or usecases it might be useful to show the validation error anyway.\n   */\n  @Input() showValidationErrorOn:'change' | 'blur' | 'submit' | 'never' = 'submit';\n\n  /**\n   * The control of the input. This can be any interface that is compatible with `AbstractControl`,\n   * but will almost always be a `FormControl`.\n   *\n   * The control is used to show disabled and invalid states.\n   */\n  @Input() control?:AbstractControl;\n\n  /**\n   * Hides the input. This is a utility input for usage of `spot-form-field` in dynamic forms.\n   * Outside of dynamic forms, you should be hiding inputs via `*ngIf` or other methods.\n   */\n  @Input() hidden = false;\n\n  @ContentChild(NgControl) ngControl:NgControl;\n\n  internalID = `spot-form-field-${+new Date()}`;\n\n  text = {\n    invalid: this.I18n.t('js.label_invalid'),\n  };\n\n  get errorsID():string {\n    return `${this.internalID}-errors`;\n  }\n\n  get descriptionID():string {\n    return `${this.internalID}-description`;\n  }\n\n  get describedByID():string {\n    return this.showErrorMessage ? this.errorsID : this.descriptionID;\n  }\n\n  get formControl():AbstractControl|undefined|null {\n    return this.ngControl?.control || this.control;\n  }\n\n  get showErrorMessage():boolean {\n    if (!this.formControl) {\n      return false;\n    }\n\n    if (this.showValidationErrorOn === 'submit') {\n      return this.formControl.invalid && this._formGroupDirective?.submitted;\n    } if (this.showValidationErrorOn === 'blur') {\n      return this.formControl.invalid && this.formControl.touched;\n    } if (this.showValidationErrorOn === 'change') {\n      return this.formControl.invalid && this.formControl.dirty;\n    }\n\n    return false;\n  }\n\n  constructor(\n    @Optional() private _formGroupDirective:FormGroupDirective,\n    readonly I18n:I18nService,\n  ) {}\n}\n","import {\n  Component,\n  ContentChild,\n  HostBinding,\n  Input,\n  Optional,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  FormGroupDirective,\n  NgControl,\n} from '@angular/forms';\n\n@Component({\n  selector: 'spot-selector-field',\n  templateUrl: './selector-field.component.html',\n})\nexport class SpotSelectorFieldComponent {\n  @HostBinding('class.spot-form-field') className = true;\n\n  @HostBinding('class.spot-selector-field') classNameCheckbox = true;\n\n  @HostBinding('class.spot-form-field_invalid') get errorClassName():boolean {\n    return this.showErrorMessage;\n  }\n\n  /**\n   * The text label of the input\n   */\n  @Input() label = '';\n\n  /**\n   * Whether the label should be in front of the input instead of after it\n   */\n  @Input() reverseLabel = false;\n\n  /**\n   * Whether the label should be in bold or regular font weight\n   */\n  @Input() labelWeight:'bold'|'regular' = 'regular';\n\n  /**\n   * Whether this input is required\n   */\n  @Input() required = false;\n\n  /**\n   * When to show validation errors. To remain consistent, you will almost never need to change this.\n   * However, for some inputs or usecases it might be useful to show the validation error anyway.\n   */\n  @Input() showValidationErrorOn:'change'|'blur'|'submit'|'never' = 'submit';\n\n  /**\n   * The control of the input. This can be any interface that is compatible with `AbstractControl`,\n   * but will almost always be a `FormControl`.\n   *\n   * The control is used to show disabled and invalid states.\n   */\n  @Input() control?:AbstractControl;\n\n  /**\n   * Hides the input. This is a utility input for usage of `spot-form-field` in dynamic forms.\n   * Outside of dynamic forms, you should be hiding inputs via `*ngIf` or other methods.\n   */\n  @Input() hidden = false;\n\n  @ContentChild(NgControl) ngControl:NgControl;\n\n  internalID = `spot-selector-field-${+new Date()}`;\n\n  get errorsID():string {\n    return `${this.internalID}-errors`;\n  }\n\n  get descriptionID():string {\n    return `${this.internalID}-description`;\n  }\n\n  get describedByID():string {\n    return this.showErrorMessage ? this.errorsID : this.descriptionID;\n  }\n\n  get formControl():AbstractControl|undefined|null {\n    return this.ngControl?.control || this.control;\n  }\n\n  get showErrorMessage():boolean {\n    if (!this.formControl) {\n      return false;\n    }\n\n    if (this.showValidationErrorOn === 'submit') {\n      return this.formControl.invalid && this.formGroupDirective?.submitted;\n    }\n    if (this.showValidationErrorOn === 'blur') {\n      return this.formControl.invalid && this.formControl.touched;\n    }\n    if (this.showValidationErrorOn === 'change') {\n      return this.formControl.invalid && this.formControl.dirty;\n    }\n\n    return false;\n  }\n\n  constructor(\n    @Optional() private formGroupDirective:FormGroupDirective,\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  HostBinding,\n  Input,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { populateInputsFromDataset } from 'core-app/shared/components/dataset-inputs';\n\nexport type SpotSwitchState = boolean;\n\nexport const spotSwitchSelector = 'spot-switch';\n\n@Component({\n  selector: spotSwitchSelector,\n  templateUrl: './switch.component.html',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SpotSwitchComponent),\n    multi: true,\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SpotSwitchComponent implements ControlValueAccessor {\n  @HostBinding('class.spot-switch') public className = true;\n\n  @ViewChild('input') public input:ElementRef;\n\n  /**\n   * The tabindex for the underlying HTML input\n   */\n  @Input() tabindex = 0;\n\n  /**\n   * Whether the input should be disabled\n   */\n  @Input() disabled = false;\n\n  /**\n   * The name of the input. Will be autogenerated if not given,\n   * but especially useful to provide in a hybrid Rails <-> Angular context\n   * where a submit of a form is handled without JS.\n   */\n  @Input() name = `spot-switch-${+(new Date())}`;\n\n  /**\n   * If you're not using Angular Reactive Forms (Which you should be using!)\n   * then you can manually set the checked state via this input.\n   */\n  @Input() public checked = false;\n\n  /**\n   * Emits when the checked state changes.\n   */\n  @Output() checkedChange = new EventEmitter<boolean>();\n\n  constructor(\n    public elementRef:ElementRef,\n    public cdRef:ChangeDetectorRef,\n  ) {\n    populateInputsFromDataset(this);\n  }\n\n  onStateChange():void {\n    const value = (this.input.nativeElement as HTMLInputElement).checked;\n    this.checkedChange.emit(value);\n    this.onChange(value);\n    this.onTouched(value);\n  }\n\n  writeValue(value:SpotSwitchState):void {\n    this.checked = !!value;\n    this.cdRef.markForCheck();\n  }\n\n  onToggle(value:SpotSwitchState):void {\n    this.writeValue(value);\n    this.onChange(value);\n    this.onTouched(value);\n  }\n\n  onChange = (_:SpotSwitchState):void => {};\n\n  onTouched = (_:SpotSwitchState):void => {};\n\n  registerOnChange(fn:(_:SpotSwitchState) => void):void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn:(_:SpotSwitchState) => void):void {\n    this.onTouched = fn;\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  ViewChild,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\n\n@Component({\n  selector: 'spot-text-field',\n  templateUrl: './text-field.component.html',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SpotTextFieldComponent),\n    multi: true,\n  }],\n})\nexport class SpotTextFieldComponent implements ControlValueAccessor {\n  @HostBinding('class.spot-text-field') public className = true;\n\n  @HostBinding('class.spot-text-field_focused') public focused = false;\n\n  @HostListener('click')\n  public onParentClick():void {\n    this.input.nativeElement.focus();\n  }\n\n  @ViewChild('input') public input:ElementRef;\n\n  /**\n   * The name of the input. Will be autogenerated if not given,\n   * but especially useful to provide in a hybrid Rails <-> Angular context\n   * where a submit of a form is handled without JS.\n   */\n  @Input() public name = `spot-text-field-${+(new Date())}`;\n\n  /**\n   * Whether the input should be disabled\n   */\n  @Input() @HostBinding('class.spot-text-field_disabled') public disabled = false;\n\n  /**\n   * By default, we show a small \"x\" inside the input on the right hand side if\n   * some value has been set. This is a button that clears the input. Setting this option\n   * to false will not show this clear button.\n   */\n  @Input() public showClearButton = true;\n\n  /**\n   * The placeholder text.\n   * This should never be a label replacement, since placeholders are not properly accessible.\n   */\n  @Input() public placeholder = '';\n\n  /**\n   * If you're not using Angular Reactive Forms (Which you should be using!)\n   * then you can manually set the value via this input.\n   */\n  @Input() public value = '';\n\n  /**\n   * Whether the field should be receive a [required] property.\n   */\n  @Input() public required:boolean = false;\n\n  /**\n   * The html input (Regexp) pattern to provide hints to keyboards what layout to use\n   * and to aid in validation.\n   */\n  @Input() public pattern:string|undefined;\n\n  /**\n   * The html inputmode to hint virtual keyboard layouts.\n   */\n  @Input() public inputmode:'text'|'decimal'|'numeric'|'tel'|'search'|'email'|'url' = 'text';\n\n  valueChanged(value:string):void {\n    this.writeValue(value);\n    this.onChange(value);\n    this.onTouched(value);\n  }\n\n  @Output() public inputFocus = new EventEmitter<FocusEvent>();\n\n  @Output() public inputBlur = new EventEmitter<FocusEvent>();\n\n  constructor(\n    private cdRef:ChangeDetectorRef,\n  ) {}\n\n  onInputFocus(event:FocusEvent):void {\n    this.focused = true;\n    this.inputFocus.next(event);\n  }\n\n  onInputBlur(event:FocusEvent):void {\n    this.focused = false;\n    this.inputBlur.next(event);\n  }\n\n  writeValue(value:string) {\n    this.value = value || '';\n    this.cdRef.markForCheck();\n  }\n\n  onChange = (_:string):void => {};\n\n  onTouched = (_:string):void => {};\n\n  registerOnChange(fn:(_:string) => void):void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn:(_:string) => void):void {\n    this.onTouched = fn;\n  }\n}\n","import {\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  forwardRef,\n  HostBinding,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport interface SpotToggleOption<T> {\n  value:T;\n  title:string;\n};\n\n@Component({\n  selector: 'spot-toggle',\n  templateUrl: './toggle.component.html',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SpotToggleComponent),\n    multi: true,\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SpotToggleComponent<T> implements ControlValueAccessor {\n  // TODO: These old styles will need to be replaced\n  @HostBinding('class.form--field-inline-buttons-container') public classNameOld = true;\n\n  @HostBinding('class.spot-toggle') public className = true;\n\n  /**\n   * The array of options that should be shown. Options have a simple structure:\n   *\n   * ```\n   * {\n   *   title:string;\n   *   value:T;\n   * }\n   * ```\n   *\n   * `title` will be shown in the toggle for the user to read, while `value` will be the\n   * value that is set as the ngModel if the option is selected.\n   */\n  @Input() options:SpotToggleOption<T>[] = [];\n\n  /**\n   * Whether the input should be disabled\n   */\n  @Input() disabled = false;\n\n  /**\n   * The name of the input. Will be autogenerated if not given,\n   * but especially useful to provide in a hybrid Rails <-> Angular context\n   * where a submit of a form is handled without JS.\n   */\n  @Input() name = `spot-toggle-${+(new Date())}`;\n\n  /**\n   * If you're not using Angular Reactive Forms (Which you should be using!)\n   * then you can manually set the value via this input.\n   */\n  @Input() public value:T;\n\n  /**\n   * Emits when the selected value changes.\n   */\n  @Output() valueChange = new EventEmitter<T>();\n\n  constructor(\n    private cdRef:ChangeDetectorRef,\n  ) {}\n\n  writeValue(value:T):void {\n    this.value = value;\n    this.cdRef.markForCheck();\n  }\n\n  onToggle(value:T):void {\n    this.writeValue(value);\n    this.onChange(value);\n    this.onTouched(value);\n  }\n\n  onChange = (_:T):void => {};\n\n  onTouched: (t:T) => void = (_:T):void => {};\n\n  registerOnChange(fn:(_:T) => void):void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn:(_:T) => void):void {\n    this.onTouched = fn;\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  Input,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport SpotDropAlignmentOption from '../../drop-alignment-options';\n\n@Component({\n  selector: 'spot-tooltip',\n  templateUrl: './tooltip.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SpotTooltipComponent {\n  @HostBinding('class.spot-tooltip') public className = true;\n\n  /**\n   * Show a dark-gray version of the tooltip\n   */\n  @Input() @HostBinding('class.spot-tooltip_dark') public dark = false;\n\n  /**\n   * Whether the tooltip should be disabled.\n   * In that case, hovering the trigger element will not do anything.\n   */\n  @Input() public disabled = false;\n\n  /**\n   * The alignment of the tooltip. There are twelve alignments in total. You can check which ones they are\n   * from the `SpotDropAlignmentOption` Enum that is available in 'core-app/spot/drop-alignment-options'.\n   */\n  @Input() public alignment:SpotDropAlignmentOption = SpotDropAlignmentOption.BottomCenter;\n\n  get alignmentClass():string {\n    return `spot-tooltip--body_${this.alignment}`;\n  }\n}\n","enum SpotDropAlignmentOption {\n  TopLeft = 'top-left',\n  TopCenter = 'top-center',\n  TopRight = 'top-right',\n\n  RightTop = 'right-top',\n  RightCenter = 'right-center',\n  RightBottom = 'right-bottom',\n\n  BottomLeft = 'bottom-left',\n  BottomCenter = 'bottom-center',\n  BottomRight = 'bottom-right',\n\n  LeftTop = 'left-top',\n  LeftCenter = 'left-center',\n  LeftBottom = 'left-bottom',\n}\n\nexport default SpotDropAlignmentOption;\n","import {\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  Output,\n} from '@angular/core';\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\n\n@Component({\n  selector: 'spot-filter-chip',\n  templateUrl: './filter-chip.component.html',\n})\nexport class SpotFilterChipComponent {\n  @HostBinding('class.spot-filter-chip') public className = true;\n\n  @Input() @HostBinding('class.spot-filter-chip_disabled') public disabled = false;\n\n  @Input() removable = true;\n\n  @Input() title = '';\n\n  @Input() icon = '';\n\n  @Output() remove = new EventEmitter<void>();\n\n  public text = {\n    remove: this.i18n.t('js.spot.filter_chip.remove'),\n  };\n\n  public get iconClasses():string[] {\n    return [\n      'spot-icon',\n      `spot-icon_${this.icon}`,\n    ];\n  }\n\n  constructor(readonly i18n:I18nService) {}\n}\n","import { Directive, forwardRef, Input } from '@angular/core';\nimport {\n  UntypedFormArray, UntypedFormControl, UntypedFormGroup, NgControl,\n} from '@angular/forms';\n\nexport const formControlBinding = {\n  provide: NgControl,\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  useExisting: forwardRef(() => SpotFormBindingDirective),\n};\n\n@Directive({\n  selector: '[spotFormBinding]',\n  providers: [formControlBinding],\n  exportAs: 'ngForm',\n})\nexport class SpotFormBindingDirective extends NgControl {\n  @Input('spotFormBinding') form!:UntypedFormControl|UntypedFormGroup|UntypedFormArray;\n\n  get control():UntypedFormControl|UntypedFormGroup|UntypedFormArray {\n    return this.form;\n  }\n\n  viewToModelUpdate():void {}\n}\n","import { OnDestroyMixin, untilComponentDestroyed } from '@w11k/ngx-componentdestroyed';\nimport { Directive, OnDestroy } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Mixin function to provide access to observable and flags\n * whether this component has been destroyed.\n *\n * Use for rxjs with .pipe(this.untilDestroyed)\n */\n@Directive()\nexport class UntilDestroyedMixin extends OnDestroyMixin implements OnDestroy {\n  public componentDestroyed = false;\n\n  ngOnDestroy():void {\n    this.componentDestroyed = true;\n    super.ngOnDestroy();\n  }\n\n  /**\n   * Helper function to access `untilComponentDestroyed`\n   */\n  protected untilDestroyed<T>():(source:Observable<T>) => Observable<T> {\n    return untilComponentDestroyed(this);\n  }\n}\n","import {\n  OnInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  SpotDropModalTeleportationService,\n  TeleportInstance,\n} from './drop-modal-teleportation.service';\nimport { UntilDestroyedMixin } from 'core-app/shared/helpers/angular/until-destroyed.mixin';\n\nexport const spotDropModalPortalComponentSelector = 'spot-drop-modal-portal';\n\n@Component({\n  selector: spotDropModalPortalComponentSelector,\n  template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SpotDropModalPortalComponent extends UntilDestroyedMixin implements OnInit, AfterViewChecked {\n  @HostBinding('class.spot-drop-modal-portal') className = true;\n\n  template:TeleportInstance|null = null;\n\n  constructor(\n    readonly cdRef:ChangeDetectorRef,\n    readonly template$:SpotDropModalTeleportationService,\n    readonly elementRef:ElementRef<HTMLElement>,\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this\n      .template$\n      .templateRef$\n      .pipe(\n        this.untilDestroyed(),\n      )\n      .subscribe((templ) => {\n        this.template = templ;\n        this.cdRef.detectChanges();\n      });\n  }\n\n  ngAfterViewChecked():void {\n    this.template$.hasRendered$.next(!!this.elementRef.nativeElement.children.length);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { A11yModule } from '@angular/cdk/a11y';\n\nimport { I18nService } from 'core-app/core/i18n/i18n.service';\nimport { SpotCheckboxComponent } from './components/checkbox/checkbox.component';\nimport { SpotSwitchComponent } from './components/switch/switch.component';\nimport { SpotToggleComponent } from './components/toggle/toggle.component';\nimport { SpotTextFieldComponent } from './components/text-field/text-field.component';\nimport { SpotFilterChipComponent } from './components/filter-chip/filter-chip.component';\nimport { SpotDropModalComponent } from './components/drop-modal/drop-modal.component';\nimport { SpotTooltipComponent } from './components/tooltip/tooltip.component';\nimport { SpotFormFieldComponent } from './components/form-field/form-field.component';\nimport { SpotFormBindingDirective } from './components/form-field/form-binding.directive';\nimport { SpotBreadcrumbsComponent } from './components/breadcrumbs/breadcrumbs.component';\nimport { SpotSelectorFieldComponent } from './components/selector-field/selector-field.component';\nimport { SpotDropModalPortalComponent } from './components/drop-modal/drop-modal-portal.component';\n\n@NgModule({\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule,\n    A11yModule,\n  ],\n\n  providers: [\n    I18nService,\n  ],\n\n  declarations: [\n    SpotBreadcrumbsComponent,\n    SpotCheckboxComponent,\n    SpotSwitchComponent,\n    SpotToggleComponent,\n    SpotTextFieldComponent,\n    SpotFilterChipComponent,\n    SpotDropModalComponent,\n    SpotDropModalPortalComponent,\n    SpotDropModalPortalComponent,\n    SpotFormFieldComponent,\n    SpotFormBindingDirective,\n    SpotTooltipComponent,\n    SpotSelectorFieldComponent,\n  ],\n\n  exports: [\n    SpotBreadcrumbsComponent,\n    SpotCheckboxComponent,\n    SpotSwitchComponent,\n    SpotToggleComponent,\n    SpotTextFieldComponent,\n    SpotFilterChipComponent,\n    SpotDropModalComponent,\n    SpotDropModalPortalComponent,\n    SpotDropModalPortalComponent,\n    SpotFormFieldComponent,\n    SpotFormBindingDirective,\n    SpotTooltipComponent,\n    SpotSelectorFieldComponent,\n  ],\n})\nexport class OpSpotModule { }\n"],"names":["I18nService","constructor","i18n","window","I18n","toTime","this","bind","locale","t","input","options","toNumber","val","localize","__decorate","Injectable","providedIn","populateInputsFromDataset","instance","cstr","declaredInputsParentKey","Object","keys","find","key","declaredInputs","console","warn","inputs","forEach","outsideName","insideName","elementRef","nativeElement","dataset","JSON","parse","err","error","SpotBreadcrumbsComponent","className","HostBinding","args","Input","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","SpotCheckboxComponent","SpotCheckboxComponent_1","cdRef","tabindex","disabled","name","Date","checked","checkedChange","EventEmitter","onChange","_","onTouched","onStateChange","value","emit","writeValue","setTimeout","indeterminate","detectChanges","registerOnChange","fn","registerOnTouched","ViewChild","Output","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ChangeDetectorRef","SpotDropModalTeleportationService","templateRef$","BehaviorSubject","hasRendered$","Subject","hasRenderedFiltered$","pipe","distinctUntilChanged","afterRenderOnce$","appearOrDissapear","filter","f","take","activate","next","clear","KeyCodes","FOCUSABLE_ELEMENT_SELECTORS","findAllFocusableElementsWithin","container","querySelectorAll","toString","SpotDropModalComponent","opened","_opened","open","close","teleportationService","allowRepositioning","alignment","closed","id","Math","round","random","text","focus_grab","onGlobalClick","escapeCallback","evt","keyCode","ESCAPE","onEscape","debounce","onResize","resizeCallback","updateAppHeight","document","documentElement","style","setProperty","innerHeight","_this","body","hasRendered","subscribe","referenceEl","floatingEl","anchor","cleanupFloatingUI","autoUpdate","_asyncToGenerator","computePosition","placement","middleware","flip","mainAxis","crossAxis","fallbackAxisSideDirection","shift","limiter","limitShift","assign","left","x","top","y","addEventListener","focusCatcherContainer","focus","querySelector","removeEventListener","focusGrabber","ngOnDestroy","onBodyClick","e","stopPropagation","type","ElementRef","SpotFormFieldComponent","errorClassName","showErrorMessage","errorsID","internalID","descriptionID","describedByID","formControl","ngControl","control","showValidationErrorOn","invalid","_formGroupDirective","submitted","touched","dirty","label","noWrapLabel","required","hidden","Optional","ContentChild","NgControl","FormGroupDirective","SpotSelectorFieldComponent","formGroupDirective","classNameCheckbox","reverseLabel","labelWeight","SpotSwitchComponent","SpotSwitchComponent_1","markForCheck","onToggle","SpotTextFieldComponent","SpotTextFieldComponent_1","onParentClick","valueChanged","focused","showClearButton","placeholder","inputmode","inputFocus","inputBlur","onInputFocus","event","onInputBlur","HostListener","SpotToggleComponent","SpotToggleComponent_1","classNameOld","valueChange","SpotTooltipComponent","dark","SpotDropAlignmentOption","BottomCenter","alignmentClass","SpotFilterChipComponent","iconClasses","icon","removable","title","remove","formControlBinding","SpotFormBindingDirective","form","viewToModelUpdate","Directive","exportAs","UntilDestroyedMixin","OnDestroyMixin","componentDestroyed","super","untilDestroyed","untilComponentDestroyed","SpotDropModalPortalComponent","template$","ngOnInit","templ","ngAfterViewChecked","children","length","OpSpotModule","NgModule","imports","FormsModule","ReactiveFormsModule","CommonModule","A11yModule","declarations","exports"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}